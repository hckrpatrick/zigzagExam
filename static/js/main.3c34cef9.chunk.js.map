{"version":3,"sources":["components/LevelTemplate.js","components/Level1.js","components/Level2.js","components/Level3.js","App.js","reportWebVitals.js","index.js"],"names":["LevelTemplate","input","result","handle","level","className","type","value","onChange","e","Level1","useState","setInput","setResult","target","start","end","replaceAll","length","isPalindrom","Level2","str","palindromeMatrix","Array","longStart","longEnd","maxLength","i","fill","j","k","substring","longestPalindrome","Level3","cuts","minPalindromeCuts","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c34cef9.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction LevelTemplate({input, result, handle, level}) {\n    const handleChange = (e)=>{\n        handle(e);\n    }\n  return (\n    <>\n        <div className=\"Level\">\n            <div className=\"Input\">\n                <h1>Level {level}</h1>\n                <input type=\"text\" value={input} onChange={handleChange}/>\n            </div>\n            <div className=\"Result\">\n                <h2>{result}</h2>\n            </div>\n        </div>\n    </>\n  );\n}\n\nexport default LevelTemplate;\n","import React, { useState } from 'react';\nimport LevelTemplate from './LevelTemplate';\n\nconst isPalindrom = (input)=>{\n    input = input.replaceAll(' ', '');\n    let start = 0, end = input.length - 1;\n    if (end === -1) return \"Empty\";\n    while (start !== end && start < end){\n        if(input[start] !== input[end])\n            return \"False\";\n        start++;\n        end--;\n    }\n    return \"True\";\n}\n\nfunction Level1() {\n    const [input, setInput] = useState('');\n    const [result, setResult] = useState('Empty');\n    const handleChange = (e)=>{\n        setInput(e.target.value);\n        setResult(isPalindrom(e.target.value));\n    }\n  return (\n    <>\n        <LevelTemplate input={input} result={result} level=\"1\" handle={handleChange}></LevelTemplate>\n    </>\n  );\n}\n\nexport default Level1;\n","import React, { useState } from 'react';\nimport LevelTemplate from './LevelTemplate';\n\nconst longestPalindrome = (str)=>{\n    str = str.replaceAll(' ', '');\n    if (str.length === 0) return \"Empty\";\n    let palindromeMatrix = new Array(str.length);\n    let longStart = 0, longEnd = 0, maxLength = 1;\n    for (let i = 0; i < str.length; i++){\n        palindromeMatrix[i] = new Array(str.length).fill(false);\n        palindromeMatrix[i][i] = true;\n    }\n\n    for(let j = 0; j < str.length - 1; j++){\n        if(str[j] === str[j+1]){\n            maxLength = 2;\n            longStart = j;\n            longEnd = j+1;\n            palindromeMatrix[j][j+1] = true;\n        }else{\n            palindromeMatrix[j][j+1] = false;\n        }\n    }\n\n    for (let k = 3; k <= str.length; ++k) {\n        for (let i = 0; i < str.length - k + 1; ++i) {\n            let j = i + k - 1;\n            if (palindromeMatrix[i + 1][j - 1] && str[i] === str[j]) {\n                palindromeMatrix[i][j] = true;\n                if (k > maxLength) {\n                    maxLength = k;\n                    longStart = i;\n                    longEnd = j;\n                }\n            }\n        }\n    }\n\n    return str.substring(longStart, longEnd+1);\n}\n\nfunction Level2() {\n    const [input, setInput] = useState('');\n    const [result, setResult] = useState('Empty');\n    const handleChange = (e)=>{\n        setInput(e.target.value);\n        setResult(longestPalindrome(e.target.value));\n    }\n  return (\n    <>\n        <LevelTemplate input={input} result={result} level=\"2\" handle={handleChange}></LevelTemplate>\n    </>\n  );\n}\n\nexport default Level2;\n","import React, { useState } from 'react';\nimport LevelTemplate from './LevelTemplate';\n\nconst minPalindromeCuts = (str)=>{\n    str = str.replaceAll(' ', '');\n    if (str.length === 0) return \"Empty\";\n    let palindromeMatrix = new Array(str.length);\n\n    for (let i = 0; i < str.length; i++){\n        palindromeMatrix[i] = new Array(str.length).fill(false);\n        palindromeMatrix[i][i] = true;\n    }\n\n    for(let j = 0; j < str.length - 1; j++){\n        if(str[j] === str[j+1]){\n            palindromeMatrix[j][j+1] = true;\n        }else{\n            palindromeMatrix[j][j+1] = false;\n        }\n    }\n\n    for (let k = 3; k <= str.length; ++k) {\n        for (let i = 0; i < str.length - k + 1; ++i) {\n            let j = i + k - 1;\n            if (palindromeMatrix[i + 1][j - 1] && str[i] === str[j]) {\n                palindromeMatrix[i][j] = true;\n            }\n        }\n    }\n\n    let cuts = new Array(str.length);\n\n    for (let i = 0; i < str.length; i++) {\n        if (palindromeMatrix[0][i])\n            cuts[i] = 0;\n        else {\n            cuts[i] = str.length;\n            for (let j = 0; j < i; j++) {\n                if (palindromeMatrix[j + 1][i] && cuts[j] + 1 < cuts[i])\n                    cuts[i] = cuts[j] + 1;\n            }\n        }\n    }\n\n    return cuts[str.length-1];\n}\n\nfunction Level3() {\n    const [input, setInput] = useState('');\n    const [result, setResult] = useState('Empty');\n    const handleChange = (e)=>{\n        setInput(e.target.value);\n        setResult(minPalindromeCuts(e.target.value));\n    }\n  return (\n    <>\n        <LevelTemplate input={input} result={result} level=\"3\" handle={handleChange}></LevelTemplate>\n    </>\n  );\n}\n\nexport default Level3;\n","import React from 'react';\nimport Level1 from './components/Level1';\nimport Level2 from './components/Level2';\nimport Level3 from './components/Level3';\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Level1></Level1>\n        <Level2></Level2>\n        <Level3></Level3>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}